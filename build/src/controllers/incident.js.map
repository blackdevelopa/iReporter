{"version":3,"sources":["../../../server/src/controllers/incident.js"],"names":["IncidentController","getAllIncidents","req","res","all","IncidentModel","forEach","value","push","status","send","getAllRedflags","incidents","redflags","type","getAllInterventions","interventions","getSingleRedflag","redflagId","parseInt","params","id","singleRedflag","console","log","json","message"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACA,IAAMA,qBAAqB;AACzBC,iBADyB,2BACTC,GADS,EACJC,GADI,EACC;AACxB,QAAMC,MAAM,EAAZ;AACAC,uBAAcC,OAAd,CAAsB,UAACC,KAAD,EAAW;AAC/BH,UAAII,IAAJ,CAASD,KAAT;AACD,KAFD;AAGA,WAAOJ,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBN,GAArB,CAAP;AACD,GAPwB;AASzBO,gBATyB,0BASVT,GATU,EASLC,GATK,EASA;AACvBE,uBAAcC,OAAd,CAAsB,UAACM,SAAD,EAAe;AACnC,UAAMC,WAAW,EAAjB;AACA,UAAID,UAAUE,IAAV,KAAmB,SAAvB,EAAkC;AAChCD,iBAASL,IAAT,CAAcI,SAAd;AACA,eAAOT,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,QAArB,CAAP;AACD;AACF,KAND;AAOD,GAjBwB;AAmBzBE,qBAnByB,+BAmBLb,GAnBK,EAmBAC,GAnBA,EAmBK;AAC5BE,uBAAcC,OAAd,CAAsB,UAACM,SAAD,EAAe;AACnC,UAAMI,gBAAgB,EAAtB;AACA,UAAIJ,UAAUE,IAAV,KAAmB,cAAvB,EAAuC;AACrCE,sBAAcR,IAAd,CAAmBI,SAAnB;AACA,eAAOT,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,aAArB,CAAP;AACD;AACF,KAND;AAOD,GA3BwB;AA6BzBC,kBA7ByB,4BA6BRf,GA7BQ,EA6BHC,GA7BG,EA6BE;AACzB,QAAMe,YAAYC,SAASjB,IAAIkB,MAAJ,CAAWC,EAApB,CAAlB;AACAhB,uBAAcC,OAAd,CAAsB,UAACM,SAAD,EAAe;AACnC,UAAMU,gBAAgB,EAAtB;AACA,UAAIV,UAAUS,EAAV,KAAiBH,SAArB,EAAgC;AAC9BK,gBAAQC,GAAR,CAAYN,SAAZ;AACAI,sBAAcd,IAAd,CAAmBI,SAAnB;AACAW,gBAAQC,GAAR,CAAYF,aAAZ;AACA,eAAOnB,IAAIM,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB,EAACC,SAAS,kBAAV,EAA8BJ,4BAA9B,EAArB,CAAP;AACD,OALD,MAKO;AACL,eAAO,IAAP;AACD;AACF,KAVD;AAWD;AA1CwB,CAA3B;;kBA8CetB,kB","file":"incident.js","sourcesContent":["import IncidentModel from '../models/incident';\n\n// get all redflags\nconst IncidentController = {\n  getAllIncidents(req, res) {\n    const all = [];\n    IncidentModel.forEach((value) => {\n      all.push(value);\n    });\n    return res.status(200).send(all);\n  },\n\n  getAllRedflags(req, res) {\n    IncidentModel.forEach((incidents) => {\n      const redflags = [];\n      if (incidents.type === 'redflag') {\n        redflags.push(incidents);\n        return res.status(200).send(redflags);\n      }\n    });\n  },\n\n  getAllInterventions(req, res) {\n    IncidentModel.forEach((incidents) => {\n      const interventions = [];\n      if (incidents.type === 'intervention') {\n        interventions.push(incidents);\n        return res.status(200).send(interventions);\n      }\n    });\n  },\n\n  getSingleRedflag(req, res) {\n    const redflagId = parseInt(req.params.id);    \n    IncidentModel.forEach((incidents) => {\n      const singleRedflag = [];\n      if (incidents.id === redflagId) {\n        console.log(redflagId);\n        singleRedflag.push(incidents);\n        console.log(singleRedflag);\n        return res.status(200).json({message: 'Specific redflag', singleRedflag});\n      } else {\n        return 'no';\n      }\n    });\n  }\n};\n\n\nexport default IncidentController;"]}